package modelo;
import java.util.*;
import java.time.*;

public class CoopElectrica {
	List<Persona> listaPersonas = new ArrayList<Persona>();
	List<MedidorAlta> listaMedidoresAlta = new ArrayList<MedidorAlta>();
	List<Lectura> listaLecturas = new ArrayList<Lectura>();
	public CoopElectrica() {
		super();
	}
	
	
	public int agregarCliente(String apellido, String nombre, long dni, String nroCliente) {
		int idPersona = 1;
		if(!listaPersonas.isEmpty())idPersona = listaPersonas.get(listaPersonas.size()-1).getIdPersona()+1;
		Persona cliente = new Cliente(idPersona, nombre, apellido, dni, nroCliente);
		listaPersonas.add(cliente);
		return idPersona;
	}
	
	public int agregarInspector(String apellido, String nombre, long dni, int zona) {
		int idPersona=1;
		if(!listaPersonas.isEmpty())idPersona = listaPersonas.get(listaPersonas.size()-1).getIdPersona()+1;
		Persona inspector = new Inspector(idPersona, nombre, apellido, dni, zona);
		listaPersonas.add(inspector);
		return idPersona;
	}
	
	public List<Persona> traerPersonas(){
		return listaPersonas;
	}
	
	public Cliente traerCliente(int id) {
		Cliente cliente = null;
		int i = 0;
		while(listaPersonas.size()>i&&cliente==null) {
			if((listaPersonas.get(i)instanceof Cliente)&&(listaPersonas.get(i).getIdPersona()==id)) {
				cliente = (Cliente) listaPersonas.get(i);
			}
			i++;
		}
		return cliente;
	}
	
	public Inspector traerInspector(int id) {
		Inspector inspector = null;
		int i = 0;
		while((listaPersonas.size()>i)&&(inspector==null)) {
			if((listaPersonas.get(i)instanceof Inspector)&&(listaPersonas.get(i).getIdPersona()==id)) {
				inspector = (Inspector) listaPersonas.get(i);
			}
			i++;
		}
		return inspector;
		
	}
	
	public int clacularDigitoVerificado(int nroSerie) {
		int verificado = 0;
		int sexto = Math.round(nroSerie/10);
		int primero = Math.round(sexto / 10000);
		int primeroAux = primero*10000;
		int segundo = Math.round((sexto-(primeroAux))/1000);
		int segundoAux = segundo*1000;
		int tercero = Math.round((sexto-(primeroAux+segundoAux))/100);
		int terceroAux = tercero*100;
		int cuarto = Math.round((sexto-(primeroAux+segundoAux+terceroAux))/10);
		int cuartoAux = cuarto * 10;
		int quinto = Math.round((sexto-(primeroAux+segundoAux+terceroAux+cuartoAux))/1);
		int producto1 = primero*9 ;
		int producto2 = segundo*8;
		int producto3 = tercero*7;
		int producto4 = cuarto*6;
		int producto5 = quinto*5;
		verificado = (producto1+producto2+producto3+producto4+producto5)%9;
		System.out.println(sexto);
		return verificado;
	}
	
	public int  agregarMedidorAlta(int nroSerie, String domicilioMedidor, Cliente cliente, int zona)throws Exception {
		int idMedidorAlta = 1;
		int digitoVerificar = Math.round(nroSerie/10);
		if (!listaMedidoresAlta.isEmpty())idMedidorAlta = listaMedidoresAlta.get(listaMedidoresAlta.size()-1).getIdMedidorAlta()+1;
		if (traerMedidorAlta(nroSerie)!=null)throw new Exception("El Medidor ya existe");
		//if (clacularDigitoVerificado(nroSerie));
		MedidorAlta medidor = new MedidorAlta(idMedidorAlta, cliente, nroSerie, domicilioMedidor, zona);
		listaMedidoresAlta.add(medidor);
		return idMedidorAlta;
	}
	
	public List<MedidorAlta> traerMedidoresAlta(){
		return listaMedidoresAlta;
	}
	
	public MedidorAlta traerMedidorAlta(int nroSerie) {
		MedidorAlta medidor = null;
		int i = 0;
		while((listaMedidoresAlta.size()>i)&&(medidor==null)) {
			if (listaMedidoresAlta.get(i).getNroSerie()==nroSerie) {
				medidor = listaMedidoresAlta.get(i);
			}
				
			i++;
		}
		return medidor;
		
	}
	
	public int agregarLectura(LocalDate fecha, MedidorAlta medidorAlta, Inspector inspector, Consumo consumo) {
		int idLectura = 1;
		if(!listaLecturas.isEmpty())idLectura = listaLecturas.get(listaLecturas.size()-1).getIdLectura()+1;
		
		Lectura lectura = new Lectura(idLectura, fecha, medidorAlta, inspector, consumo);
		listaLecturas.add(lectura);
		return idLectura;
	}
	
	public List<Lectura> traerLectura(){
		return listaLecturas;
	}
	
	public List<Lectura> traerLectura(MedidorAlta ma){
		List<Lectura> lectura = new ArrayList<Lectura>();
		int i = 0;
		while(listaLecturas.size()>i) {
			if(listaLecturas.get(i).getMedidorAlta().equals(ma)) {
				lectura.add(listaLecturas.get(i));
			}
			i++;
		}
		return lectura;
	}
	
	public Lectura traerLectura(MedidorAlta ma, int mes, int anio) {
		Lectura lectura = null;
		int i = 0;
		while(listaLecturas.size()>i) {
			if((listaLecturas.get(i).getMedidorAlta().equals(ma))&&(listaLecturas.get(i).getFecha().getYear()==anio)&&(listaLecturas.get(i).getFecha().getMonthValue()==mes)) {
				lectura = listaLecturas.get(i);
			}
			i++;
		}
		
		return lectura;
		
	}
	
	
}
